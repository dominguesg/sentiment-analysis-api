{"ast":null,"code":"import * as Plotly from 'plotly.js';\ndocument.getElementById(\"submit\").addEventListener(\"click\", process_input); // Configuring how to handle the API Requests\n// function to handle success\n\nfunction success() {\n  var data = JSON.parse(this.responseText); //parse the string to JSON\n\n  update_image(data['sentiment']);\n  update_plot(data['probabilities']);\n} // function to handle error\n\n\nfunction error(err) {\n  console.log('Request Failed', err); //error details will be in the \"err\" object\n}\n\nvar xhr = new XMLHttpRequest(); //invoke a new instance of the XMLHttpRequest\n\nxhr.onload = success; // call success function if request is successful\n\nxhr.onerror = error; // call error function if request failed\n\nfunction process_input() {\n  var user_input = document.getElementById('user_input').value; // open a POST request\n\n  xhr.open('POST', \"http://127.0.0.1/predict\");\n  xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n  xhr.send(JSON.stringify({\n    \"text\": user_input\n  })); // send the request to the server.\n  // xhr.open('POST', \"http://127.0.0.1:8000/predict\");\n  // xhr.send(JSON.stringify({'\"text\"': user_input})); // send the request to the server.\n}\n\nfunction update_plot(predicted_data) {\n  var layout = {\n    margin: {\n      l: 25,\n      r: 20,\n      b: 25,\n      t: 25,\n      pad: 5\n    },\n    title: 'Probabilities',\n    font: {\n      family: 'Raleway, sans-serif'\n    }\n  };\n  var data = [{\n    predicted_data: predicted_data,\n    x: Object.keys(predicted_data),\n    y: Object.values(predicted_data),\n    type: 'bar'\n  }];\n  Plotly.newPlot('myDiv', data, layout, {\n    displayModeBar: false\n  });\n}\n\nfunction update_image(sentiment) {\n  if (sentiment === \"positive\") {\n    document.getElementById(\"imgClickAndChange\").src = \"assets/positive.png\";\n  } else if (sentiment === \"neutral\") {\n    document.getElementById(\"imgClickAndChange\").src = \"assets/neutral.png\";\n  } else if (sentiment === \"negative\") {\n    document.getElementById(\"imgClickAndChange\").src = \"assets/negative.png\";\n  }\n}","map":{"version":3,"sources":["/home/dominguesg/projects/sentiment-analysis-api/sentiment-analysis-web/src/index.js"],"names":["Plotly","document","getElementById","addEventListener","process_input","success","data","JSON","parse","responseText","update_image","update_plot","error","err","console","log","xhr","XMLHttpRequest","onload","onerror","user_input","value","open","setRequestHeader","send","stringify","predicted_data","layout","margin","l","r","b","t","pad","title","font","family","x","Object","keys","y","values","type","newPlot","displayModeBar","sentiment","src"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,WAAxB;AAEAC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,gBAAlC,CAAmD,OAAnD,EAA4DC,aAA5D,E,CAEA;AACA;;AACA,SAASC,OAAT,GAAmB;AACf,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAX,CADe,CAC2B;;AAC1CC,EAAAA,YAAY,CAACJ,IAAI,CAAC,WAAD,CAAL,CAAZ;AACAK,EAAAA,WAAW,CAACL,IAAI,CAAC,eAAD,CAAL,CAAX;AACH,C,CAED;;;AACA,SAASM,KAAT,CAAeC,GAAf,EAAoB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAA9B,EADgB,CACoB;AACvC;;AAED,IAAIG,GAAG,GAAG,IAAIC,cAAJ,EAAV,C,CAAgC;;AAChCD,GAAG,CAACE,MAAJ,GAAab,OAAb,C,CAAsB;;AACtBW,GAAG,CAACG,OAAJ,GAAcP,KAAd,C,CAAsB;;AAGtB,SAASR,aAAT,GAAyB;AACrB,MAAIgB,UAAU,GAAGnB,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCmB,KAAvD,CADqB,CAErB;;AACAL,EAAAA,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiB,0BAAjB;AACAN,EAAAA,GAAG,CAACO,gBAAJ,CAAqB,cAArB,EAAqC,gCAArC;AACAP,EAAAA,GAAG,CAACQ,IAAJ,CAASjB,IAAI,CAACkB,SAAL,CAAe;AAAC,YAAQL;AAAT,GAAf,CAAT,EALqB,CAK2B;AAChD;AACA;AACH;;AAED,SAAST,WAAT,CAAqBe,cAArB,EAAoC;AAChC,MAAIC,MAAM,GAAG;AAAGC,IAAAA,MAAM,EAAE;AAACC,MAAAA,CAAC,EAAE,EAAJ;AAAQC,MAAAA,CAAC,EAAE,EAAX;AAAeC,MAAAA,CAAC,EAAE,EAAlB;AAAsBC,MAAAA,CAAC,EAAE,EAAzB;AAA6BC,MAAAA,GAAG,EAAE;AAAlC,KAAX;AACGC,IAAAA,KAAK,EAAE,eADV;AAEGC,IAAAA,IAAI,EAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAFR,GAAb;AAKA,MAAI9B,IAAI,GAAG,CAAC;AAACoB,IAAAA,cAAc,EAAdA,cAAD;AACJW,IAAAA,CAAC,EAAEC,MAAM,CAACC,IAAP,CAAYb,cAAZ,CADC;AAEJc,IAAAA,CAAC,EAAEF,MAAM,CAACG,MAAP,CAAcf,cAAd,CAFC;AAGJgB,IAAAA,IAAI,EAAE;AAHF,GAAD,CAAX;AAKE1C,EAAAA,MAAM,CAAC2C,OAAP,CAAe,OAAf,EAAwBrC,IAAxB,EAA8BqB,MAA9B,EAAsC;AAACiB,IAAAA,cAAc,EAAE;AAAjB,GAAtC;AACL;;AAED,SAASlC,YAAT,CAAsBmC,SAAtB,EAAgC;AAC5B,MAAIA,SAAS,KAAK,UAAlB,EAA6B;AACzB5C,IAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C4C,GAA7C,GAAmD,qBAAnD;AACH,GAFD,MAGK,IAAID,SAAS,KAAK,SAAlB,EAA4B;AAC7B5C,IAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C4C,GAA7C,GAAmD,oBAAnD;AACH,GAFI,MAGA,IAAID,SAAS,KAAK,UAAlB,EAA6B;AAC9B5C,IAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C4C,GAA7C,GAAmD,qBAAnD;AACH;AACJ","sourcesContent":["import * as Plotly from 'plotly.js';\n\ndocument.getElementById(\"submit\").addEventListener(\"click\", process_input);\n\n// Configuring how to handle the API Requests\n// function to handle success\nfunction success() {\n    var data = JSON.parse(this.responseText); //parse the string to JSON\n    update_image(data['sentiment'])\n    update_plot(data['probabilities'])\n}\n\n// function to handle error\nfunction error(err) {\n    console.log('Request Failed', err); //error details will be in the \"err\" object\n}\n\nvar xhr = new XMLHttpRequest(); //invoke a new instance of the XMLHttpRequest\nxhr.onload = success; // call success function if request is successful\nxhr.onerror = error;  // call error function if request failed\n\n\nfunction process_input() {\n    var user_input = document.getElementById('user_input').value;\n    // open a POST request\n    xhr.open('POST', \"http://127.0.0.1/predict\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xhr.send(JSON.stringify({\"text\": user_input})); // send the request to the server.\n    // xhr.open('POST', \"http://127.0.0.1:8000/predict\");\n    // xhr.send(JSON.stringify({'\"text\"': user_input})); // send the request to the server.\n}\n\nfunction update_plot(predicted_data){\n    var layout = {  margin: {l: 25, r: 20, b: 25, t: 25, pad: 5 },\n                    title: 'Probabilities',\n                    font:{ family: 'Raleway, sans-serif'},\n                }\n\n    var data = [{predicted_data,\n            x: Object.keys(predicted_data),\n            y: Object.values(predicted_data),\n            type: 'bar'\n        }];\n      Plotly.newPlot('myDiv', data, layout, {displayModeBar: false});\n}\n\nfunction update_image(sentiment){\n    if (sentiment === \"positive\"){\n        document.getElementById(\"imgClickAndChange\").src = \"assets/positive.png\";\n    }\n    else if (sentiment === \"neutral\"){\n        document.getElementById(\"imgClickAndChange\").src = \"assets/neutral.png\";\n    }\n    else if (sentiment === \"negative\"){\n        document.getElementById(\"imgClickAndChange\").src = \"assets/negative.png\";\n    }\n}"]},"metadata":{},"sourceType":"module"}