{"ast":null,"code":"'use strict';\n\nvar readUInt = require('../readUInt'); // NOTE: we only support baseline and progressive JPGs here\n// due to the structure of the loader class, we only get a buffer\n// with a maximum size of 4096 bytes. so if the SOF marker is outside\n// if this range we can't detect the file size correctly.\n\n\nfunction isJPG(buffer) {\n  //, filepath\n  var SOIMarker = buffer.toString('hex', 0, 2);\n  return 'ffd8' === SOIMarker;\n}\n\nfunction isEXIF(buffer) {\n  //, filepath\n  var exifMarker = buffer.toString('hex', 2, 6);\n  return exifMarker === '45786966'; // 'Exif'\n}\n\nfunction extractSize(buffer, i) {\n  return {\n    'height': buffer.readUInt16BE(i),\n    'width': buffer.readUInt16BE(i + 2)\n  };\n}\n\nvar APP1_DATA_SIZE_BYTES = 2;\nvar EXIF_HEADER_BYTES = 6;\nvar TIFF_BYTE_ALIGN_BYTES = 2;\nvar BIG_ENDIAN_BYTE_ALIGN = '4d4d';\nvar LITTLE_ENDIAN_BYTE_ALIGN = '4949'; // Each entry is exactly 12 bytes\n\nvar IDF_ENTRY_BYTES = 12;\nvar NUM_DIRECTORY_ENTRIES_BYTES = 2;\n\nfunction validateExifBlock(buffer, i) {\n  // Skip APP1 Data Size\n  var exifBlock = buffer.slice(APP1_DATA_SIZE_BYTES, i); // Consider byte alignment\n\n  var byteAlign = exifBlock.toString('hex', EXIF_HEADER_BYTES, EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES); // Ignore Empty EXIF. Validate byte alignment\n\n  var isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;\n  var isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;\n\n  if (isBigEndian || isLittleEndian) {\n    return extractOrientation(exifBlock, isBigEndian);\n  }\n}\n\nfunction extractOrientation(exifBlock, isBigEndian) {\n  // TODO: assert that this contains 0x002A\n  // var STATIC_MOTOROLA_TIFF_HEADER_BYTES = 2;\n  // var TIFF_IMAGE_FILE_DIRECTORY_BYTES = 4;\n  // TODO: derive from TIFF_IMAGE_FILE_DIRECTORY_BYTES\n  var idfOffset = 8; // IDF osset works from right after the header bytes\n  // (so the offset includes the tiff byte align)\n\n  var offset = EXIF_HEADER_BYTES + idfOffset;\n  var idfDirectoryEntries = readUInt(exifBlock, 16, offset, isBigEndian);\n  var start;\n  var end;\n\n  for (var directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {\n    start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;\n    end = start + IDF_ENTRY_BYTES; // Skip on corrupt EXIF blocks\n\n    if (start > exifBlock.length) {\n      return;\n    }\n\n    var block = exifBlock.slice(start, end);\n    var tagNumber = readUInt(block, 16, 0, isBigEndian); // 0x0112 (decimal: 274) is the `orientation` tag ID\n\n    if (tagNumber === 274) {\n      var dataFormat = readUInt(block, 16, 2, isBigEndian);\n\n      if (dataFormat !== 3) {\n        return;\n      } // unsinged int has 2 bytes per component\n      // if there would more than 4 bytes in total it's a pointer\n\n\n      var numberOfComponents = readUInt(block, 32, 4, isBigEndian);\n\n      if (numberOfComponents !== 1) {\n        return;\n      }\n\n      return readUInt(block, 16, 8, isBigEndian);\n    }\n  }\n}\n\nfunction validateBuffer(buffer, i) {\n  // index should be within buffer limits\n  if (i > buffer.length) {\n    throw new TypeError('Corrupt JPG, exceeded buffer limits');\n  } // Every JPEG block must begin with a 0xFF\n\n\n  if (buffer[i] !== 0xFF) {\n    throw new TypeError('Invalid JPG, marker table corrupted');\n  }\n}\n\nfunction calculate(buffer) {\n  // Skip 4 chars, they are for signature\n  buffer = buffer.slice(4);\n  var orientation;\n  var i, next;\n\n  while (buffer.length) {\n    // read length of the next block\n    i = buffer.readUInt16BE(0);\n\n    if (isEXIF(buffer)) {\n      orientation = validateExifBlock(buffer, i);\n    } // ensure correct format\n\n\n    validateBuffer(buffer, i); // 0xFFC0 is baseline standard(SOF)\n    // 0xFFC1 is baseline optimized(SOF)\n    // 0xFFC2 is progressive(SOF2)\n\n    next = buffer[i + 1];\n\n    if (next === 0xC0 || next === 0xC1 || next === 0xC2) {\n      var size = extractSize(buffer, i + 5);\n\n      if (!orientation) {\n        return size;\n      }\n\n      return {\n        width: size.width,\n        height: size.height,\n        orientation: orientation\n      };\n    } // move to the next block\n\n\n    buffer = buffer.slice(i + 2);\n  }\n\n  throw new TypeError('Invalid JPG, no size found');\n}\n\nmodule.exports = {\n  'detect': isJPG,\n  'calculate': calculate\n};","map":null,"metadata":{},"sourceType":"script"}