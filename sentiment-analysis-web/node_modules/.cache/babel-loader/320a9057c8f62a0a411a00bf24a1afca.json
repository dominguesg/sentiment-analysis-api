{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function handleHoverModeDefaults(layoutIn, layoutOut, fullData) {\n  function coerce(attr, dflt) {\n    // don't coerce if it is already coerced in other place e.g. in cartesian defaults\n    if (layoutOut[attr] !== undefined) return layoutOut[attr];\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n\n  var clickmode = coerce('clickmode');\n  var hovermodeDflt;\n\n  if (layoutOut._has('cartesian')) {\n    if (clickmode.indexOf('select') > -1) {\n      hovermodeDflt = 'closest';\n    } else {\n      // flag for 'horizontal' plots:\n      // determines the state of the mode bar 'compare' hovermode button\n      layoutOut._isHoriz = isHoriz(fullData, layoutOut);\n      hovermodeDflt = layoutOut._isHoriz ? 'y' : 'x';\n    }\n  } else hovermodeDflt = 'closest';\n\n  return coerce('hovermode', hovermodeDflt);\n};\n\nfunction isHoriz(fullData, fullLayout) {\n  var stackOpts = fullLayout._scatterStackOpts || {};\n\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n    var subplot = trace.xaxis + trace.yaxis;\n    var subplotStackOpts = stackOpts[subplot] || {};\n    var groupOpts = subplotStackOpts[trace.stackgroup] || {};\n\n    if (trace.orientation !== 'h' && groupOpts.orientation !== 'h') {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}