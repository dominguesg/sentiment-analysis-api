{"ast":null,"code":"'use strict';\n\nmodule.exports = createSelectBuffer;\n\nvar createFBO = require('gl-fbo');\n\nvar pool = require('typedarray-pool');\n\nvar ndarray = require('ndarray');\n\nvar nextPow2 = require('bit-twiddle').nextPow2;\n\nvar selectRange = function selectRange(arr, x, y) {\n  var closestD2 = 1e8;\n  var closestX = -1;\n  var closestY = -1;\n  var ni = arr.shape[0];\n  var nj = arr.shape[1];\n\n  for (var i = 0; i < ni; i++) {\n    for (var j = 0; j < nj; j++) {\n      var r = arr.get(i, j, 0);\n      var g = arr.get(i, j, 1);\n      var b = arr.get(i, j, 2);\n      var a = arr.get(i, j, 3);\n\n      if (r < 255 || g < 255 || b < 255 || a < 255) {\n        var dx = x - i;\n        var dy = y - j;\n        var d2 = dx * dx + dy * dy;\n\n        if (d2 < closestD2) {\n          closestD2 = d2;\n          closestX = i;\n          closestY = j;\n        }\n      }\n    }\n  }\n\n  return [closestX, closestY, closestD2];\n};\n\nfunction SelectResult(x, y, id, value, distance) {\n  this.coord = [x, y];\n  this.id = id;\n  this.value = value;\n  this.distance = distance;\n}\n\nfunction SelectBuffer(gl, fbo, buffer) {\n  this.gl = gl;\n  this.fbo = fbo;\n  this.buffer = buffer;\n  this._readTimeout = null;\n  var self = this;\n\n  this._readCallback = function () {\n    if (!self.gl) {\n      return;\n    }\n\n    fbo.bind();\n    gl.readPixels(0, 0, fbo.shape[0], fbo.shape[1], gl.RGBA, gl.UNSIGNED_BYTE, self.buffer);\n    self._readTimeout = null;\n  };\n}\n\nvar proto = SelectBuffer.prototype;\nObject.defineProperty(proto, 'shape', {\n  get: function get() {\n    if (!this.gl) {\n      return [0, 0];\n    }\n\n    return this.fbo.shape.slice();\n  },\n  set: function set(v) {\n    if (!this.gl) {\n      return;\n    }\n\n    this.fbo.shape = v;\n    var c = this.fbo.shape[0];\n    var r = this.fbo.shape[1];\n\n    if (r * c * 4 > this.buffer.length) {\n      pool.free(this.buffer);\n      var buffer = this.buffer = pool.mallocUint8(nextPow2(r * c * 4));\n\n      for (var i = 0; i < r * c * 4; ++i) {\n        buffer[i] = 0xff;\n      }\n    }\n\n    return v;\n  }\n});\n\nproto.begin = function () {\n  var gl = this.gl;\n  var shape = this.shape;\n\n  if (!gl) {\n    return;\n  }\n\n  this.fbo.bind();\n  gl.clearColor(1, 1, 1, 1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\nproto.end = function () {\n  var gl = this.gl;\n\n  if (!gl) {\n    return;\n  }\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  if (!this._readTimeout) {\n    clearTimeout(this._readTimeout);\n  }\n\n  this._readTimeout = setTimeout(this._readCallback, 1);\n};\n\nproto.query = function (x, y, radius) {\n  if (!this.gl) {\n    return null;\n  }\n\n  var shape = this.fbo.shape.slice();\n  x = x | 0;\n  y = y | 0;\n\n  if (typeof radius !== 'number') {\n    radius = 1.0;\n  }\n\n  var x0 = Math.min(Math.max(x - radius, 0), shape[0]) | 0;\n  var x1 = Math.min(Math.max(x + radius, 0), shape[0]) | 0;\n  var y0 = Math.min(Math.max(y - radius, 0), shape[1]) | 0;\n  var y1 = Math.min(Math.max(y + radius, 0), shape[1]) | 0;\n\n  if (x1 <= x0 || y1 <= y0) {\n    return null;\n  }\n\n  var dims = [x1 - x0, y1 - y0];\n  var region = ndarray(this.buffer, [dims[0], dims[1], 4], [4, shape[0] * 4, 1], 4 * (x0 + shape[0] * y0));\n  var closest = selectRange(region.hi(dims[0], dims[1], 1), radius, radius);\n  var dx = closest[0];\n  var dy = closest[1];\n\n  if (dx < 0 || Math.pow(this.radius, 2) < closest[2]) {\n    return null;\n  }\n\n  var c0 = region.get(dx, dy, 0);\n  var c1 = region.get(dx, dy, 1);\n  var c2 = region.get(dx, dy, 2);\n  var c3 = region.get(dx, dy, 3);\n  return new SelectResult(dx + x0 | 0, dy + y0 | 0, c0, [c1, c2, c3], Math.sqrt(closest[2]));\n};\n\nproto.dispose = function () {\n  if (!this.gl) {\n    return;\n  }\n\n  this.fbo.dispose();\n  pool.free(this.buffer);\n  this.gl = null;\n\n  if (this._readTimeout) {\n    clearTimeout(this._readTimeout);\n  }\n};\n\nfunction createSelectBuffer(gl, shape) {\n  var width = shape[0];\n  var height = shape[1];\n  var options = {};\n  var fbo = createFBO(gl, width, height, options);\n  var buffer = pool.mallocUint8(width * height * 4);\n  return new SelectBuffer(gl, fbo, buffer);\n}","map":null,"metadata":{},"sourceType":"script"}